// Global color config
@import 'libs';
@import 'helpers';

$shade-value: 15;

// --- Base Palette ---
// -> PRIVATE, do not use outside this settings file unless you have a really really good reason
$white: #fff;
$gray: #ebf0f0;
$light-turquoise: #b7d1d8;
$turquoise: #7dbfcb;
$light-blue: #5899fc;
$blue: #3b57a0;
$dark-blue: #3c4b72;
$yellow: #fed341;
$pink: #f035a6;

// --- Themes ---
// -> PUBLIC, use these for color references
$themes: (
  'default': (
    'text-primary': $dark-blue,
    'text-secondary': shade($gray, 60),
    'text-tertiary': shade($gray, 30),
    'highlight': $pink,
    'accent': $turquoise,
    'bg': $white,
    'island': $white,
    'well': tint($gray, 20),
    'border': shade($gray, 10),
    'shadow': shade($gray, 30)
  ),
  'reverse': (
    'text-primary': $white,
    'text-secondary': tint($dark-blue, 90),
    'text-tertiary': tint($dark-blue, 60),
    'highlight': $yellow,
    'accent': $turquoise,
    'bg': tint($dark-blue, 5),
    'island': tint($dark-blue, 10),
    'well': shade($dark-blue, 10),
    'border': shade($dark-blue, 30),
    'shadow': shade($dark-blue, 40)
  ),
  'wash-turquoise': (
    'text-primary': $white,
    'text-secondary': $dark-blue,
    'text-tertiary': shade($turquoise, 40),
    'highlight': $white,
    'accent': $dark-blue,
    'bg': $turquoise,
    'island': tint($turquoise, 10),
    'well': shade($turquoise, 10),
    'border': shade($turquoise, 20),
    'shadow': shade($turquoise, 30)
  ),
  'wash-blue': (
    'text-primary': $white,
    'text-secondary': $dark-blue,
    'text-tertiary': shade($blue, 30),
    'highlight': $white,
    'accent': $dark-blue,
    'bg': $blue,
    'island': tint($blue, 10),
    'well': shade($blue, 10),
    'border': shade($blue, 20),
    'shadow': shade($blue, 30)
  ),
  'wash-pink': (
    'text-primary': $white,
    'text-secondary': $dark-blue,
    'text-tertiary': shade($pink, 30),
    'highlight': $white,
    'accent': $dark-blue,
    'bg': tint($pink, 30),
    'island': tint($pink, 10),
    'well': shade($pink, 10),
    'border': shade($pink, 20),
    'shadow': shade($pink, 30)
  )
);

// --- Helpers & mixins ---
// -> PUBLIC

// getter function to access color map values
// -> PARAMS
//    - STRING/LIST $colors: the name(s) of the color roles, e.g. 'highlight'
//    - STRING $name (optional): the name of the theme, e.g. 'default', 'dark'
//    - NUMBER $grade (optional): 'grade' (as in 'gradation') the color to be darker or lighter
//      -> pass in a negative number to shade the color
//      -> pass in a positive number to tint the color
// -> PUBLIC
// -> USAGE:
//    - color: color('text-primary');
//    - color: color('highlight' 'primary', 'reverse');
@function color($color, $theme-name: 'default', $grade: 0, $opacity: 1) {
  // first extract the 'theme' nested map
  $theme: map-get($themes, $theme-name);

  // grab the color value from the $themes map
  $value: map-get($theme, $color);

  // tint or shade the color
  @if ($grade < 0) {
    $value: shade($value, abs($grade));
  } 

  @if ($grade > 0) {
    $value: tint($value, abs($grade));
  }

  @if ($opacity < 1) {
    $value: rgba($value, $opacity);
  }

  @return $value;
}

// create the string for color custom properties used in color() and theme() mixins below
// --color-text-primary[-light]
// -> PUBLIC
@function color-property($color, $shade: 'none') {
  @return --color-#{$color}#{if($shade != 'none', -#{$shade}, '')}
}

// create default and custom property versions of a color
// -> PUBLIC
// -> USAGE
//    - @include color(background-color, highlight, dark);
@mixin color(
  $prop, 
  $color, 
  $shade: 'none', 
  $theme: 'default', 
  $important: false) {
  
  $shades: (
    'light': $shade-value,
    'dark': ($shade-value * -1),
    'none': 0
  );

  #{$prop}: important(color($color, $theme, $grade: map-get($shades, $shade)), $important);
  #{$prop}: important(var(color-property($color, $shade)), $important);
}

// decorator to set color ('foreground') property
@mixin color-fg($color, $props...) {
  @include color(color, $color, $props...);
}

// decorator to set background-color property
@mixin color-bg($color, $props...) {
  @include color(background-color, $color, $props...);
}

// set up custom properties with the right values for a theme container
// -> PUBLIC
// -> USAGE
//    - body { @include theme('default'); }
@mixin theme($theme, $include-props: false) {

  // create a list of custom properties for each color role in a theme
  // -> e.g. --color-text-primary
  $theme-colors: map-get($themes, $theme);

  @each $name, $color in $theme-colors {
    #{color-property($name, 'light')}: #{tint($color, $shade-value)};
    #{color-property($name)}: #{$color};
    #{color-property($name, 'dark')}: #{shade($color, $shade-value)};
  }

  // include some background, border, etc. props in the selector?
  // -> use this only for setting defaults. Modifier classes can just redefine the custom properties (e.g. --color-text-primary).
  @if $include-props {
    @include color('border-color', 'border', $theme: $theme);
    @include color-bg('bg', $theme: $theme);
    @include color-fg('text-secondary', $theme: $theme);

    // highlight color when you select something
    &::selection {
      @include color-bg('highlight', $theme: $theme);
      @include color-fg('bg', $theme: $theme);
      text-shadow: none;
    }
  }
}
