//  Fluid aspect ratio
// -> provides a fluid container to maintain aspect ratio when resizing

// --- Mixins & helpers ---
// create a modifier with width:height ratio values
// PRIVATE
@mixin _aspect-variation($w: 2, $h: 1, $use-scale: true) {
  [data-ui-aspect*='#{$w}x#{$h}'] {
    &::before {
      @if $use-scale {
        padding-top: (ms($h, 1) / ms($w, 1) * 100%);
      } @else {
        padding-top: ($h / $w * 100%);
      }
    }
  }
}

// --- Base ---
[data-ui-aspect] {
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  display: block;
  position: relative;
  text-align: center;
  width: 100%;

  &::before {
    content: '';
    display: block;
    padding-top: (ms(1, 1) / ms(2, 1) * 100%);
  }
}

// --- Elements ---
[data-ui-aspect-content],
[data-ui-aspect] > iframe {
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;

  @supports (display: flex) {
    display: flex;
  }
}

// force an inline child image to conform to the aspect ratio of the aspect-content container
[data-ui-aspect-image] {
  display: none;

  @supports (object-fit: contain) and (object-position: center) {
    bottom: 0;
    display: block;
    height: 100%;
    left: 0;
    line-height: 100%;
    margin: auto;
    object-fit: contain;
    object-position: center;
    position: absolute;
    right: 0;
    top: 0;
    width: 100%;
  }

  @media print {
    display: inline-block;
  }
}

[data-ui-aspect-image~="cover"] {
  @supports (object-fit: cover) {
    object-fit: cover;
  }
}

// --- Modifiers ---
[data-ui-aspect~='catalog'] {
  background-size: contain;

  &::before {
    padding-top: (1.3 / 1 * 100%);
  }

  [data-ui-aspect-image] {
    @supports (object-fit: cover) {
      object-fit: cover;
    }
  }
}

@include _aspect-variation(1, 1);
@include _aspect-variation(4, 1);
@include _aspect-variation(16, 9, $use-scale: false);


